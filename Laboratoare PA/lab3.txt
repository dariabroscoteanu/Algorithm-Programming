#1a
s=input()
#import functools

l=[x for x in s.split() if len(x)>=2]
lrez=sorted(l,key=None,reverse=True)
print(lrez)

#b
s=input()
#import functools

l=[x for x in s.split() if len(x)>=2]
lrez=sorted(l,key=len,reverse=True)
print(lrez)

def criteriu(x):
    if(len(x)>=2):
        return 1
    else:
        return 0
str1=input()
str1=list(str1.split())
str1.sort(reverse=True, key=criteriu)
print(str1)

#2
n=int(input())
ls=[]
for i in range(n):
    s=input()
    v=tuple([l for l in s.split()])
    ls.append(v)
#for i in range(n):
   # ls[i]=tuple(ls[i])
print(ls)


for i in range(n):
    s=input()
    v=tuple([l for l in s.split()]) #v o sa aiba 4 elemente
    ls.append(v)
print(ls)



n=int(input())
ls=[]
for i in range(n):
   a,b,c,d=(l for l in input().split())
   t=int(a),b+" "+c,int(d)
   ls.append(t)
def cheie(x):
    return x[2]
print(sorted(ls,key=cheie))



def comp(p,q):
 if p[0]>q[0]:
     return 1
 else:
     if(p[0]==q[0]):
         if(p[1]>q[1]):
             return 1
         else:
             if (p[1]==q[1]):
                 return 0
             else:
                 return -1
 return -1
import functools

ls=sorted(ls,key=functools.cmp_to_key(comp))
print(ls)


n=int(input())
l=[]
for i in range(n):
    ls=input().split()
    s=" ".join(ls[1:-1])
    t1=int(ls[0]),s,int(ls[-1])
    l.append(t1)
print(sorted(l,key=lambda t:(t[1],t[0])))




#2
n=int(input())
import  functools
ls=[]
def crit(p,q):
    if p[0]>q[0]:
        return 1
    else:
        if p[0]==q[0]:
            if p[1]>q[1]:
                return 1
            else:
                if p[1]==q[1]:
                    return 0
                else:
                    return -1
    return -1
for i in range(n):
    a,b,c,d=(l for l in input().split())
    t=int(a),b+" "+c,int(d)
    ls.append(t)
ls=sorted(ls,key=functools.cmp_to_key(crit))
print(ls)


#b
n=int(input())
import  functools
ls=[]
def crit(p,q):
    if p[1]>q[1]:
        return 1
    else:
        if p[1]==q[1]:
            if p[0]>q[0]:
                return 1
            else:
                if p[0]==q[0]:
                    return 0
                else:
                    return -1
    return -1
for i in range(n):
    a,b,c,d=(l for l in input().split())
    t=int(a),b+" "+c,int(d)
    ls.append(t)
ls=sorted(ls,key=functools.cmp_to_key(crit))
for x in ls:
    print(x[1]," ",x[2])

#c
n=int(input())
import  functools
ls=[]
def crit(p):
    return p[2]

"""
def crit(p,q):
    if p[1]>q[1]:
        return 1
    else:
        if p[1]==q[1]:
            if p[0]>q[0]:
                return 1
            else:
                if p[0]==q[0]:
                    return 0
                else:
                    return -1
    return -1"""
for i in range(n):
    a,b,c,d=(l for l in input().split())
    t=int(a),b+" "+c,int(d)
    ls.append(t)
print(max(ls,key=crit))
"""ls=sorted(ls,key=functools.cmp_to_key(crit))
for x in ls:
    print(x[1]," ",x[2])"""


#matrice
#1
n=int(input())
m=int(input())
a=[]
for i in range(0,n):
    b=[]
    s=input()
    b=[int(x) for x in s.split()]
    a.append(b)
for i in range(0,n):
    for k in range(i+1,n):
        if a[i][0]>a[k][0]:
            a[i],a[k]=a[k],a[i]
print(a)

#2
n=int(input())
p=1
print(1)
for j in range(0,n+1):
    print(1,end=" ")
    for i in range(1,j+1):
        p=p*(j-i+1)//i
        print(p,end=" ")
    print()

#3
m=int(input())
n=int(input())
a=[]
for i in range(0,m):
    b=[]
    s=input()
    b=[int(x) for x in s.split()]
    a.append(b)
print(a)
c=[]
for j in range(0,n):
    b=[]
    for i in range(0,m):
        b.append(a[i][j])
    c.append(b)
print(c)

#1
n=int(input("nr de linii="))
m=int(input("nr de coloane="))
lista=[]
for i in range(n):
    linie=[]
    for j in range(m):
        linie.append(int(input()))
    #linie=[int(input()) for j in range(m)]
    lista.append(linie)
#lista=[ [int(input()) for j in range(m)] for i in range(n)]
print(lista)
for i in range(n):
    for j in range(i+1,n):
        if lista[i][0]>lista[j][0]:
            lista[i],lista[j]=lista[j],lista[i]
for i in range(n):
    for j in range(m):
        print(f"{​​lista[i][j]:5}​​",end="")
    print()

for linie in lista:
    for x in linie:
        print(f"{​​x:5}​​",end="")
    print()

for linie in lista:
    ls=" ".join( [f"{​​x:5}​​" for x in linie] )
    print(ls)

ls="\n".join([  " ".join( [f"{​​x:5}​​" for x in linie] )     for linie in lista])
print(ls)