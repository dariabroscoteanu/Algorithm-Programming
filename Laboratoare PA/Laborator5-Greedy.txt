#cuburi
#1. Cuburi. Se dau n cuburi cu laturile diferite două câte două. Fiecare cub are o culoare, codificată cu
#un număr de la 1 la p (p dat).
#a) Să se construiască un turn de înălțime maximă de cuburi în care un cub nu poate fi aşezat pe un cub
#de aceeași culoare sau cu latură mai mică decât a sa – O(n logn). Pe prima linie a fişierului de intrare
#se dau n şi p, iar pe următoarele linii latura şi culoarea fiecărui cub. În fişierul de ieşire se vor afişa
#înălțimea turnului obținut şi indicele cuburilor folosite (de la bază la vârf)
f=open("date.in")
g=open("date.out","w")
s=f.readline()
n,p=s.split()
n=int(n)
p=int(p)
l=[]
nr=0
poz=[]
for i in range(n):
    s = f.readline()
    a,b=s.split()
    a=int(a)
    b=int(b)
    c=[a, b]
    poz.append(i)
    l.append(c)

t=sorted(poz,key=lambda e: -l[e][0])
print(t)
h=l[t[0]][0]
sol=[t[0]+1]
us=t[0]
for i in range(1,n):
    k=l[us][1]
    if k!=l[t[i]][1] and l[t[i]][0]<l[us][0]:
        h=h+l[t[i]][0]
        us=t[i]
        sol.append(t[i]+1)
print(h)
print(sol)
g.close()
f.close()

#acoperire
l=[]
with open("acoperire.in") as f:
    ls=f.readline()
    a,b=ls.split()
    a=int(a)
    b=int(b)
    ls=f.readline()
    m=ls.split()
    n=int(m[0])
    ls=f.readline()

    while(ls!=''):
        ls1=[]
        a1,b1=ls.split()
        ls1.append(int(a1))
        ls1.append(int(b1))
        l.append(ls1)


        ls=f.readline()
    f.close()
print(a,b)
print(n)

l=sorted(l,key=lambda t:(t[1],t[0]),reverse=True)
i=0
a1=l[i][0]
b1=l[i][1]
print(l[i])
if(b1<b):
    print(-1)
else:
     cap1=a1
     cap2=b1
     nr=1
     i=1
     a1=l[i][0]
     b1=l[i][1]

     while(i<len(l)-1 and a<cap1):

        if(cap1>a1 and cap1<=b1<=cap2):
            print(l[i])
            nr=nr+1
            cap1=a1
            cap2=b1
            i=i+1
            a1=l[i][0]
            b1=l[i][1]


        else:
            i=i+1
            a1=l[i][0]
            b1=l[i][1]



print(nr)


print(l)

#Problema partiţionării intervalelor – Se consideră n intervale închise (interpretare: n cursuri, pentru
#care se cunosc ora de început şi ora de sfârşit). Se cere să se împartă (partiţioneze) această mulţime de
#intervale într-un număr minim de submulţimi cu proprietatea că oricare două intervale dintr-o
#submulţime nu se intersectează şi să se afişeze aceste submulţimi (interpretare: să se determine numărul
#minim de săli necesare pentru a putea programa aceste cursuri în aceeaşi zi şi afişaţi o astfel de
#programare). Care dintre următorii algoritmi Greedy sunt corecţi pentru a rezolva această problemă?


f=open("date.in")
g=open("date.out","w")
n=f.readline()
n=int(n)
l=[]
for i in range(n):
    s=f.readline()
    p,u=s.split()
    p=int(p)
    u=int(u)
    ll=[p,u]
    l.append(ll)
f.close()

ls=sorted(l)
sali=[]
import heapq
h=[]
sali.append(ls[0])
heapq.heappush(h,(ls[1],0))
for i in range(1,n):
    t,nrsala=heapq.heappop(h)
    if ls[i][0]>t:
        sali[nrsala].append(ls[i])
        heapq.heappush(h,(ls[i][1],nrsala))
    else:
        sali.append(ls[i])
        heapq.heappush(h,(ls[i][1],len(sali)-1))
        heapq.heappush(h,(t,nrsala))
for i in range(len(sali)):
    print(i+1,sali[i])
g.close()



#Memorarea textelor pe bandă cu frecvență de acces (v. problema textelor pe banda din curs)
#n texte cu lungimile L(1),...,L(n) urmează a fi aşezate pe o bandă. Pentru a citi textul de pe poziţia k,
#trebuie citite textele de pe poziţiile 1,2,...,k. Pentru fiecare text i se cunoaşte şi frecvenţa f(i) cu care
#acesta este citit. Să se determine o modalitate de așezare a textelor pe bandă astfel încât timpul total de
#acces să fie minimizat. 
f=open("date.in")

n=f.readline()
n=int(n)
l=[]
poz=[]
for i in range(n):
    s=f.readline()
    x,y=s.split()
    x=int(x)
    y=int(y)
    ll=[x,y]
    l.append(ll)
    poz.append(i)
poz.sort(key=lambda e:-l[e][1]/l[e][0])
for i in range(len(poz)):
    print(poz[i]+1)
f.close()

#Planificare cu minimizarea întârzierii maxime – Se consideră o mulţime de n activităţi care trebuie
#planificate pentru a folosi o aceeaşi resursă. Această resursă poate fi folosită de o singură activitate la un
#moment dat. Pentru fiecare activitate i se cunosc durata li şi termenul limită până la care se poate executa
#ti (raportat la ora de început 0). 


f=open("date.in")
n=f.readline()
n=int(n)
l=[]
poz=[]
for i in range(n):
    s=f.readline()
    x,y=s.split()
    x=int(x)
    y=int(y)
    ll=[x,y]
    l.append(ll)
    poz.append(i+1)
f.close()
t=sorted(poz,key=lambda e:(l[e-1][1],-l[e-1][0]))
print(t)
start=0
stop=0
dif=0
for i in range(n):
    k=t[i]-1
    start=stop
    stop=stop+l[k][0]
    print(start, stop,l[k][0],l[k][1])
    dif=max(dif,stop-l[k][1])
print(dif)


#Maximizarea profitului cu respectarea termenelor limită Se consideră o mulţime de n activităţi
#care trebuie planificate pentru a folosi o aceeaşi resursă. Această resursă poate fi folosită de o singură
#activitate la un moment dat. Toate activităţile au aceeaşi durată (să presupunem 1). Pentru fiecare
#activitate i se cunosc termenul limită până la care se poate executa ti (raportat la ora de început 0, 1  ti
# n) şi profitul pi care se primeşte dacă activitatea i se execută la timp (cu respectarea termenului limită).
#Să se determine o submulţime de activităţi care se pot planifica astfel încât profitul total obţinut să fie
#maxim. 


f=open("date.in")
n=f.readline()
n=int(n)
l=[]
poz=[]
for i in range(n):
    s=f.readline()
    x,y=s.split()
    x=int(x)
    y=int(y)
    ll=[x,y]
    l.append(ll)
    poz.append(i+1)
t=sorted(poz,key=lambda e:-l[e-1][0]/l[e-1][1])
print(t)
profit=l[t[0]-1][0]
sol=[]
sol.append(t[0])
timp=1
print(sol)
for i in range(1,n):
    k=t[i]-1
    if timp+1<=l[k][1]:
        timp=timp+1
        sol.append(t[i])
        profit=profit+l[k][0]
print(profit)
print(sol)

f.close()

#6. Maximizarea profitului cu respectarea termenelor limită Se consideră o mulţime de n activităţi
#care trebuie planificate pentru a folosi o aceeaşi resursă. Această resursă poate fi folosită de o singură
#activitate la un moment dat. Toate activităţile au aceeaşi durată (să presupunem 1). Pentru fiecare
#activitate i se cunosc termenul limită până la care se poate executa ti (raportat la ora de început 0, 1  ti
# n) şi profitul pi care se primeşte dacă activitatea i se execută la timp (cu respectarea termenului limită).
#Să se determine o submulţime de activităţi care se pot planifica astfel încât profitul total obţinut să fie
#maxim. 
f = open("date.in","r")
n = int(f.readline())
lista = list()
for i in range(n):
    ls = f.readline()
    ls = ls.split()
    lista.append([int(ls[0]),int(ls[1]),int(i+1)])
f.close()
lista.sort(key = lambda e: -e[1])
import heapq
h = list()
t = n*[None]
j = 0
for i in range(n,0,-1):
    while j < n and lista[j][1] == i:
        heapq.heappush(h, (-lista[j][0], lista[j][2]))
        j += 1
    if len(h) > 0:
        t[i-1] = heapq.heappop(h)[1]
print(t)

#Interclasarea optimă a n șiruri ordonate – Se dau lungimile a n șiruri ordonate L1, L2, ... , Ln. Dorim
#să obținem un șir ordonat crescător care conține toate elementele celor n șiruri inițiale, interclasând
#succesiv perechi de șiruri. Știind că interclasarea a două șiruri de lungimi A respectiv B necesită A+B
#deplasări, să se determine o ordine în care trebuie să se realizeze interclasările astfel încât numărul total
#de deplasări să fie minim – O(nlogn)


f=open("date.in")
s=f.readline()
l=[int(x) for x in s.split()]
n=len(l)
h=[]
import heapq
for i in range(n):
    heapq.heappush(h,l[i])
suma=0
s=0
for i in range(2,n):
    x=heapq.heappop(h)
    y=heapq.heappop(h)
    s=x+y
    suma=suma+s
    heapq.heappush(h,s)
print(suma*2)
f.close()


