#Se dă un vector a=(a1,…an) de tip munte (există un indice i astfel încât a1<a2<…<ai > ai+1>…>an;
#ai se numește vârful muntelui). Propuneți un algoritm O(log n) care determină vârful muntelui (în
#calculul complexității algoritmului nu se consideră și citirea vectorului).

f=open("date.in")
g=open("date.out","w")
n=f.readline()
n=int(n)
s=f.readline()
l=[int(x) for x in s.split()]
def munte(li,ls):
    if li == ls:
        return l[li]
    else:
        mij=(li+ls)//2
        if l[mij]>l[mij+1] and l[mij]>l[mij-1]:
            return l[mij]
        elif l[mij]<l[mij+1]:
            return munte(mij+1,ls)
        else:
            return munte(li,mij)
n=n-1
mt=munte(0,n)
g.write(str(mt))
f.close()
g.close()




#Se citește de la tastatură un număr natural N. Se consideră o tablă (matrice) pătratică
#de dimensiuni
# pe care se scriu numerele naturale de la 1 si 2prin vizitarea
#recursivă a celor patru cadrane ale tablei în ordinea indicată și în figura alăturată:
#dre pta-sus, stânga-jos, stânga-sus, dreapta-jos. De exemplu, daca N=2, tabla este completată
#astfel:
n=int(input())
n=1<<n
print(n)
g=open("tabla.out","w")
a=[[0 for i in range(n)] for j in range(n)]
val=1
def matrice(a,x,y,m):
    global val
    if m==1:
        a[x][y]=val
        val=val+1
    else:
        matrice(a,x,y+m//2,m//2)
        matrice(a,x+m//2,y,m//2)
        matrice(a,x,y,m//2)
        matrice(a,x+m//2,y+m//2,m//2)
matrice(a,0,0,n)
for x in a:
    for y in x:
        g.write(str(y))
        g.write(" ")
    g.write("\n")

g.close()




