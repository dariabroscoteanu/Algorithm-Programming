1. Cuburi. Se dau n cuburi cu laturile diferite două câte două. Fiecare cub are o culoare, codificată cu un număr de la 1 la p (p dat).  

a) Să se construiască un turn de înălțime maximă de cuburi în care un cub nu poate fi aşezat pe
 un cub de aceeași culoare sau cu latură mai mică decât a sa – O(n logn).  
Pe prima linie a fişierului de intrare se dau n şi p, iar pe următoarele linii latura
 şi culoarea fiecărui cub. În fişierul de ieşire se vor afişa înălțimea turnului obținut 
şi indicele cuburilor folosite (de la bază la vârf) .

f=open("date.in","r")
s=f.readline()
n,p=s.split()
n=int(n)
p=int(p)
l=[]
for i in range(n):
    s=f.readline()
    x,y=s.split()
    x=int(x)
    y=int(y)
    a=[]
    a.append(x)
    a.append(y)
    l.append(a)
f.close()
t=sorted(l,key=lambda e:e[0],reverse=True)
print(t)
sol=[0]
us=0
h=t[0][0]
for i in range(1,n):
    k=t[us][1]
    if k!=t[i][1] and t[i][0]<t[us][0]:
        h=h+t[i][0]
        sol.append(i)
        us=i
print(h)
print(sol)



Memorarea textelor pe bandă cu frecvență de acces (v. problema textelor pe banda din curs) 

 n texte cu lungimile L(1),...,L(n) urmează a fi aşezate pe o bandă.
 Pentru a citi textul de pe poziţia k, trebuie citite textele de pe poziţiile
 1,2,...,k. Pentru fiecare text i se cunoaşte şi frecvenţa f(i) cu care acesta este citit.
 Să se determine o modalitate de așezare a textelor pe bandă astfel încât timpul total
 de acces să fie minimizat. Timpul total de acces pentru o așezare a textelor corespunzătoare
 unei permutări p se definește ca fiind 
 O(n log n)  
Pe prima linie a fişierului de intrare se dă n,
 iar pe următoarele linii lungimea și frecvența fiecărui text. 


f=open("date.in")
n=int(f.readline())
l=[]
poz=[]
for i in range(n):
    s=f.readline()
    x,y=s.split()
    x=int(x)
    y=int(y)
    ll=[]
    ll.append(x)
    ll.append(y)
    l.append(ll)
    poz.append(i+1)
t=sorted(poz,key= lambda e:l[e-1][1]/l[e-1][0],reverse=True)
print(t)



f=open("date.in")
n=int(f.readline())
l=[]
poz=[]
for i in range(n):
    s=f.readline()
    x,y=s.split()
    x=int(x)
    y=int(y)
    ll=[]
    ll.append(x)
    ll.append(y)
    l.append(ll)
    poz.append(i)
t=sorted(poz,key=lambda e:l[e][0]/l[e][1],reverse=True)
print(t)
sol=[t[0]+1]
us=t[0]
timp=1
for i in range(1,n):
    if timp+1<=l[t[i]][0]:
        sol.append(t[i]+1)
        us=t[i]
        timp=timp+1
print(sol)
f.close()






f=open("date.in")
s=f.readline()
l=[int(x) for x in s.split()]
sa=sb=0
i=0
n=len(l)-1
pas=1
while i<n:
    if pas%2!=0:
        if l[i]>=l[n]:
            sa=sa+l[i]
            i=i+1
        else:
            sa=sa+l[n]
            n=n-1
    else:
        if l[i]>=l[n]:
            sb=sb+l[i]
            i=i+1
        else:
            sb=sb+l[n]
            n=n-1
    pas=pas+1
print(sa,sb)
f.close()
