#Functii
"""
def f(x,y):
    while x!=y:
        if x<y:
            y=y-x
        else:
            x=x-y

    return x

x=f(15,25)
print(x)

#daca fct nu are return, o sa returneze None

def f():
    print("nu returnez nimic,de fapt None")

x=f()
print(x)
ls=[int(x) for x in input().split()]
print(ls.sort()) #None
print(ls.sorted())
#ls.sort()=modifica ls,nu il returneaza




def operatii(x,y,z):
    return x+y+z,x+y,x+z,y+z

t=operatii(4,5,6)
print(t,type(t))

a,b,c,d=operatii(4,5,6)
print(a,b,c,d)

a,*b=operatii(4,5,6)
print(a,b,type(b))

a,*b,d=operatii(4,5,6)
print(a,b,type(b),d)

ls=[4,5,6]
t=operatii(*ls)
print(t)


#Specificare parametri
def f(x,y,z):
    print(f"x={x},y={y},z={z}")

#parametri dati prin pozitie
f(1,2,3)

#se pot da si prin nume -> nu trebuie respectata ordinea
f(y=1,z=2,x=5)

f(1,z=2,y=3)

def f_default(x,y,z,d=0):
    print(f"x={x},y={y},z={z},d={d}")

f_default(1,2,3)#d nu are valoare default
f_default(1,2,3,4)

def f_var(*p):
    print(p,type(p))

f_var(1,2)
f_var(1,2,3,4,5)

def mai_mici_decat(x,*param):
    nr=0
    for y in param:
        if x>y:
            nr=nr+1
    return nr

print(mai_mici_decat(3,1,7,4,2,0,9))
print(mai_mici_decat(3,8,9))

def operatie(x,*param,op='+'):
    s=x
    if op=='x':
        for y in param:
            s=s+y
    if op=='*':
        for y in param:
            s=s*y
        return  s
    return x

print((operatie(1,2,3,'*')))#devine elem in param
print(operatie(1,2,3,op='*'))

def modific(x):
    x=7
    print("x=",x)

x=10
modific(x)
print("x=",x)

def modific_lista(ls):
    ls.append(12)

ls=[3,4]
modific_lista(ls)
print(ls)

def f(d,cheie,valoare):
    d[cheie]=valoare

d={"1":123,"2":456}
f("2",567)
print(d)

def creez_lista(ls):
    ls=[1,2,3]
    return ls

ls=[]
ls=creez_lista(ls)
print(ls)

"""
#VIZIBILITATE
def accesez():
    print(x)

def atribuire():
    x=10

def modific_valoare():
    global x
    x=x+1

x=100
accesez()
atribuire()
print(x)
#modific()
